name: Deploy WildTrace to AWS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: wildtrace
  ECS_SERVICE: wildtrace-service
  ECS_CLUSTER: wildtrace-cluster

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type check
      run: npm run type-check

    - name: Run linter
      run: npm run lint

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN: ${{ secrets.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN }}

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: dev-${{ github.sha }}
      run: |
        # Build Docker image with build args
        docker build \
          --build-arg NEXT_PUBLIC_SUPABASE_URL="${{ secrets.DEV_NEXT_PUBLIC_SUPABASE_URL }}" \
          --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.DEV_NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
          --build-arg NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN="${{ secrets.DEV_NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN }}" \
          -f Dockerfile.aws \
          -t $ECR_REGISTRY/$ECR_REPOSITORY-dev:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY-dev:latest .
        
        # Push images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-dev:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-dev:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY-dev:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }}-dev \
          --service ${{ env.ECS_SERVICE }}-dev \
          --force-new-deployment

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: prod-${{ github.sha }}
      run: |
        # Build Docker image with build args
        docker build \
          --build-arg NEXT_PUBLIC_SUPABASE_URL="${{ secrets.PROD_NEXT_PUBLIC_SUPABASE_URL }}" \
          --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.PROD_NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
          --build-arg NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN="${{ secrets.PROD_NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN }}" \
          -f Dockerfile.aws \
          -t $ECR_REGISTRY/$ECR_REPOSITORY-prod:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY-prod:latest .
        
        # Push images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-prod:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-prod:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY-prod:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }}-prod \
          --service ${{ env.ECS_SERVICE }}-prod \
          --force-new-deployment

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }}-prod \
          --services ${{ env.ECS_SERVICE }}-prod

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: Deployment Success
      if: needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success'
      run: |
        echo "üöÄ WildTrace deployment successful!"
        echo "Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
        echo "Commit: ${{ github.sha }}"
        
    - name: Deployment Failure
      if: needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure'
      run: |
        echo "‚ùå WildTrace deployment failed!"
        echo "Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
        echo "Commit: ${{ github.sha }}"
        exit 1
